{"version":3,"sources":["SearchDialog.jsx","BookmarkDialog.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["SearchDialog","open","onClose","searchTerm","onSearchTermChange","onSearch","Dialog","DialogTitle","onSubmit","DialogContent","label","variant","fullWidth","value","onChange","validators","errorMessages","DialogActions","Button","color","onClick","type","useStyles","makeStyles","theme","appBar","position","title","marginLeft","spacing","flex","formFieldTopMargin","marginTop","Transition","React","forwardRef","props","ref","Slide","direction","BookmarkDialog","creatingNew","name","onNameChange","url","onUrlChange","category","onCategoryChange","bookmarkCategories","onSave","classes","fullScreen","useMediaQuery","useTheme","breakpoints","down","formFields","className","Autocomplete","freeSolo","options","map","categoryToChoose","defaultValue","inputValue","onInputChange","renderInput","params","TextField","TransitionComponent","AppBar","Toolbar","IconButton","edge","aria-label","Close","Typography","text","padding","paper","margin","maxWidth","paddingBottom","subheader","backgroundColor","palette","background","top","bottom","grow","flexGrow","fabButton","zIndex","left","right","search","borderRadius","shape","fade","common","white","width","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","create","up","noBookmarksText","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","useLocalStorage","id","bookmarks","categoryName","bookmarkMenu","usePopupState","popupId","useState","bookmarkMenuOpenOn","setBookmarkMenuOpenOn","bookmarkMenuCanBeMovedUp","setBookmarkMenuCanBeMovedUp","bookmarkMenuCanBeMovedDown","setBookmarkMenuCanBeMovedDown","handleBookmarkMenuMoveUp","moveBy","bookmarkCategoriesAfterSave","slice","currentCategory","find","indexOfBookmark","indexOf","splice","writeStorage","bookmarkDialogName","setBookmarkDialogName","bookmarkDialogUrl","setBookmarkDialogUrl","bookmarkDialogCategory","setBookmarkDialogCategory","bookmarkDialogOpen","setBookmarkDialogOpen","editingBookmarkId","setEditingBookmarkId","creatingNewBookmark","setCreatingNewBookmark","searchDialogOpen","setSearchDialogOpen","searchDialogSearchTerm","setSearchDialogSearchTerm","bookmarkCategoriesAppliedQuery","setBookmarkCategoriesAppliedQuery","bookmarkCategoriesSearchResult","setBookmarkCategoriesSearchResult","useEffect","searchResult","filter","bookmark","toLowerCase","includes","length","appMenu","infoDialogOpen","setInfoDialogOpen","href","e","target","categoryFinalName","bookmarkAfterEdit","Math","max","reduce","ids","concat","Infinity","categoryToAddBookmarkTo","undefined","categoryToCreate","highestId","unshift","push","handleBookmarkDialogSave","Menu","bindMenu","MenuItem","close","handleBookmarkMenuDelete","CssBaseline","Paper","square","gutterBottom","List","Fragment","key","ListSubheader","ListItem","button","component","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","ListItemSecondaryAction","event","bookmarkCategory","toggle","toggleBookmarkMenu","Hidden","xsDown","InputBase","placeholder","root","input","inputProps","smUp","Fab","bindToggle","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3a022be.chunk.js","sourcesContent":["import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\n\nexport default function SearchDialog({\n  open, onClose, searchTerm, onSearchTermChange, onSearch,\n}) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>Search</DialogTitle>\n      <ValidatorForm onSubmit={onSearch}>\n        <DialogContent>\n          <TextValidator\n            label=\"Name or URL\"\n            variant=\"outlined\"\n            fullWidth\n            value={searchTerm}\n            onChange={onSearchTermChange}\n            validators={['required']}\n            errorMessages={['This field is required']}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={onClose}>\n            Close\n          </Button>\n          <Button color=\"primary\" type=\"submit\">\n            Search\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n\nSearchDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  searchTerm: PropTypes.string.isRequired,\n  onSearchTermChange: PropTypes.func.isRequired,\n  onSearch: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  makeStyles,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport Slide from '@material-ui/core/Slide';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Close as CloseIcon } from '@material-ui/icons';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n  formFieldTopMargin: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n// eslint-disable-next-line react/jsx-props-no-spreading\nconst Transition = React.forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\n\nexport default function BookmarkDialog({\n  open,\n  creatingNew,\n  name,\n  onNameChange,\n  url,\n  onUrlChange,\n  category,\n  onCategoryChange,\n  bookmarkCategories,\n  onClose,\n  onSave,\n}) {\n  const classes = useStyles();\n  const fullScreen = useMediaQuery(useTheme().breakpoints.down('xs'));\n\n  const formFields = (\n    <>\n      <TextValidator\n        label=\"Name\"\n        variant=\"outlined\"\n        fullWidth\n        className={fullScreen ? classes.formFieldTopMargin : null}\n        value={name}\n        onChange={onNameChange}\n        validators={['required']}\n        errorMessages={['This field is required.']}\n      />\n      <TextValidator\n        label=\"URL\"\n        variant=\"outlined\"\n        fullWidth\n        className={classes.formFieldTopMargin}\n        value={url}\n        onChange={onUrlChange}\n        validators={['required']}\n        errorMessages={['This field is required.']}\n      />\n      <Autocomplete\n        freeSolo\n        options={bookmarkCategories.map((categoryToChoose) => categoryToChoose.name)}\n        defaultValue={category}\n        inputValue={category}\n        onInputChange={onCategoryChange}\n        renderInput={(params) => (\n          <TextField\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...params}\n            label=\"Category\"\n            variant=\"outlined\"\n            fullWidth\n            className={classes.formFieldTopMargin}\n          />\n        )}\n      />\n    </>\n  );\n\n  return (\n    <Dialog open={open} onClose={onClose} fullScreen={fullScreen} TransitionComponent={Transition}>\n      {fullScreen ? (\n        <>\n          <ValidatorForm onSubmit={onSave}>\n            <AppBar className={classes.appBar}>\n              <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" onClick={onClose} aria-label=\"close\">\n                  <CloseIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                  {creatingNew ? 'Add bookmark' : 'Edit Bookmark'}\n                </Typography>\n                <Button color=\"inherit\" type=\"submit\">\n                  Save\n                </Button>\n              </Toolbar>\n            </AppBar>\n            <DialogContent>{formFields}</DialogContent>\n          </ValidatorForm>\n        </>\n      ) : (\n        <>\n          <DialogTitle>{creatingNew ? 'Add bookmark' : 'Edit Bookmark'}</DialogTitle>\n          <ValidatorForm onSubmit={onSave}>\n            <DialogContent>{formFields}</DialogContent>\n            <DialogActions>\n              <Button color=\"primary\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button color=\"primary\" type=\"submit\">\n                Save\n              </Button>\n            </DialogActions>\n          </ValidatorForm>\n        </>\n      )}\n    </Dialog>\n  );\n}\n\nBookmarkDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  creatingNew: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  onNameChange: PropTypes.func.isRequired,\n  url: PropTypes.string.isRequired,\n  onUrlChange: PropTypes.func.isRequired,\n  category: PropTypes.string.isRequired,\n  onCategoryChange: PropTypes.func.isRequired,\n  bookmarkCategories: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      bookmarks: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        url: PropTypes.string,\n        categoryName: PropTypes.string,\n      })),\n    }),\n  ).isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Fab from '@material-ui/core/Fab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Avatar from '@material-ui/core/Avatar';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport InputBase from '@material-ui/core/InputBase';\nimport {\n  fade, Hidden, useMediaQuery, useTheme,\n} from '@material-ui/core';\nimport { useLocalStorage, writeStorage } from '@rehooks/local-storage';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { bindMenu, bindToggle, usePopupState } from 'material-ui-popup-state/hooks';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport SearchDialog from './SearchDialog';\nimport BookmarkDialog from './BookmarkDialog';\n\nconst useStyles = makeStyles((theme) => ({\n  text: {\n    padding: theme.spacing(2, 2, 0),\n  },\n  paper: {\n    margin: 'auto',\n    marginTop: theme.spacing(3),\n    maxWidth: '80vw',\n    paddingBottom: theme.spacing(8),\n    [theme.breakpoints.down('xs')]: {\n      margin: 0,\n      maxWidth: '100vw',\n    },\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto',\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    width: 'auto',\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  },\n  noBookmarksText: {\n    padding: theme.spacing(2, 2, 0),\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [bookmarkCategories] = useLocalStorage('bookmarkCategories', [\n    {\n      id: 1,\n      name: 'Uncategorized',\n      bookmarks: [\n        {\n          id: 1,\n          name: 'Edit me!',\n          url: 'https://example.com',\n          categoryName: 'Uncategorized',\n        },\n      ],\n    },\n  ]);\n\n  const bookmarkMenu = usePopupState({\n    variant: 'popover',\n    popupId: 'bookmarkMenu',\n  });\n\n  // the bookmark whose 'more' button was clicked\n  const [bookmarkMenuOpenOn, setBookmarkMenuOpenOn] = useState(null);\n\n  // whether the bookmark can be moved up in the category\n  const [bookmarkMenuCanBeMovedUp, setBookmarkMenuCanBeMovedUp] = useState(false);\n\n  // whether the bookmark can be moved down in the category\n  const [bookmarkMenuCanBeMovedDown, setBookmarkMenuCanBeMovedDown] = useState(false);\n\n  const toggleBookmarkMenu = (bookmark, event) => {\n    setBookmarkMenuOpenOn(bookmark);\n    const bookmarkCategory = bookmarkCategories.find(\n      (category) => category.name === bookmark.categoryName,\n    );\n    setBookmarkMenuCanBeMovedUp(bookmarkCategory.bookmarks[0] !== bookmark);\n    setBookmarkMenuCanBeMovedDown(bookmarkCategory.bookmarks.slice(-1)[0] !== bookmark);\n    bookmarkMenu.toggle(event);\n  };\n  const handleBookmarkMenuDelete = () => {\n    // let's not mutate the state directly\n    let bookmarkCategoriesAfterSave = bookmarkCategories.slice(0);\n\n    const currentCategory = bookmarkCategoriesAfterSave.find(\n      (category) => category.name === bookmarkMenuOpenOn.categoryName,\n    );\n\n    // delete the bookmark\n    currentCategory.bookmarks = currentCategory.bookmarks.filter(\n      (bookmark) => bookmark.id !== bookmarkMenuOpenOn.id,\n    );\n\n    // if the category the bookmark was in is left empty, delete it too\n    bookmarkCategoriesAfterSave = bookmarkCategoriesAfterSave.filter(\n      (category) => category.bookmarks.length !== 0,\n    );\n\n    writeStorage('bookmarkCategories', bookmarkCategoriesAfterSave);\n  };\n  const handleBookmarkMenuMoveUp = (moveBy) => {\n    // let's not mutate the state directly\n    const bookmarkCategoriesAfterSave = bookmarkCategories.slice(0);\n\n    const currentCategory = bookmarkCategoriesAfterSave.find(\n      (category) => category.name === bookmarkMenuOpenOn.categoryName,\n    );\n\n    const indexOfBookmark = currentCategory.bookmarks.indexOf(bookmarkMenuOpenOn);\n\n    currentCategory.bookmarks.splice(\n      indexOfBookmark - moveBy,\n      0,\n      currentCategory.bookmarks.splice(indexOfBookmark, 1)[0],\n    );\n\n    writeStorage('bookmarkCategories', bookmarkCategoriesAfterSave);\n  };\n\n  const [bookmarkDialogName, setBookmarkDialogName] = useState('');\n  const [bookmarkDialogUrl, setBookmarkDialogUrl] = useState('https://');\n  const [bookmarkDialogCategory, setBookmarkDialogCategory] = useState('');\n  const [bookmarkDialogOpen, setBookmarkDialogOpen] = useState(false);\n  const [editingBookmarkId, setEditingBookmarkId] = useState(-1);\n  const [creatingNewBookmark, setCreatingNewBookmark] = useState(false);\n  const createNewBookmark = () => {\n    setBookmarkDialogName('');\n    setBookmarkDialogUrl('https://');\n    setBookmarkDialogCategory('');\n    setEditingBookmarkId(-1);\n    setCreatingNewBookmark(true);\n    setBookmarkDialogOpen(true);\n  };\n  const editBookmark = (bookmark) => {\n    setBookmarkDialogName(bookmark.name);\n    setBookmarkDialogUrl(bookmark.url);\n    setBookmarkDialogCategory(bookmark.categoryName);\n    setEditingBookmarkId(bookmark.id);\n    setCreatingNewBookmark(false);\n    setBookmarkDialogOpen(true);\n  };\n  const handleBookmarkDialogSave = () => {\n    // let's not mutate the state directly\n    let bookmarkCategoriesAfterSave = bookmarkCategories.slice(0);\n\n    // bookmark in a category without name is uncategorized\n    const categoryFinalName = bookmarkDialogCategory === '' ? 'Uncategorized' : bookmarkDialogCategory;\n\n    const bookmarkAfterEdit = {\n      id: -1, // will be changed later\n      name: bookmarkDialogName,\n      url: bookmarkDialogUrl,\n      categoryName: categoryFinalName,\n    };\n\n    if (creatingNewBookmark) {\n      // the id is the highest id + 1\n      bookmarkAfterEdit.id = Math.max(\n        ...bookmarkCategoriesAfterSave.reduce(\n          (ids, category) => ids.concat(category.bookmarks.map((bookmark) => bookmark.id)),\n          [],\n        ),\n      ) + 1;\n      // if there are no bookmarks (therefore no categories), Math.max will return -Infinity\n      if (bookmarkAfterEdit.id === -Infinity) bookmarkAfterEdit.id = 1;\n    } else {\n      // the id doesn't change\n      bookmarkAfterEdit.id = editingBookmarkId;\n\n      // remove the bookmark from the current category\n      // eslint-disable-next-line max-len\n      const currentCategory = bookmarkCategoriesAfterSave.find((category) => category.bookmarks.map((bookmark) => bookmark.id).includes(editingBookmarkId));\n      currentCategory.bookmarks = currentCategory.bookmarks.filter(\n        (bookmark) => bookmark.id !== editingBookmarkId,\n      );\n\n      // if the category is left empty, remove it too\n      bookmarkCategoriesAfterSave = bookmarkCategoriesAfterSave.filter(\n        (category) => category.bookmarks.length !== 0,\n      );\n    }\n\n    // add the bookmark to category (and create it if it doesn't exist)\n    const categoryToAddBookmarkTo = bookmarkCategoriesAfterSave.find(\n      (category) => category.name === categoryFinalName,\n    );\n    if (categoryToAddBookmarkTo === undefined) {\n      const categoryToCreate = {\n        // the id is the highest id + 1\n        id:\n          bookmarkCategoriesAfterSave.reduce(\n            (highestId, category) => Math.max(category.id, highestId),\n            0,\n          ) + 1,\n        name: categoryFinalName,\n        bookmarks: [bookmarkAfterEdit],\n      };\n\n      // if creating the 'Uncategorized' category, add it to the beginning\n      if (categoryFinalName === 'Uncategorized') {\n        bookmarkCategoriesAfterSave.unshift(categoryToCreate);\n      } else {\n        bookmarkCategoriesAfterSave.push(categoryToCreate);\n      }\n    } else {\n      categoryToAddBookmarkTo.bookmarks.push(bookmarkAfterEdit);\n    }\n\n    writeStorage('bookmarkCategories', bookmarkCategoriesAfterSave);\n  };\n\n  const [searchDialogOpen, setSearchDialogOpen] = useState(false);\n  const [searchDialogSearchTerm, setSearchDialogSearchTerm] = useState('');\n  const [bookmarkCategoriesAppliedQuery, setBookmarkCategoriesAppliedQuery] = useState('');\n  const [bookmarkCategoriesSearchResult, setBookmarkCategoriesSearchResult] = useState(\n    bookmarkCategories,\n  );\n  useEffect(() => {\n    if (bookmarkCategoriesAppliedQuery === '') {\n      setBookmarkCategoriesSearchResult(bookmarkCategories);\n    } else {\n      let searchResult = bookmarkCategories.slice(0);\n\n      searchResult = searchResult.map((category) => ({\n        ...category,\n        bookmarks: category.bookmarks.filter(\n          // eslint-disable-next-line max-len\n          (bookmark) => bookmark.name.toLowerCase().includes(bookmarkCategoriesAppliedQuery.toLowerCase())\n            || bookmark.url.toLowerCase().includes(bookmarkCategoriesAppliedQuery.toLowerCase()),\n        ),\n      }));\n\n      // remove empty categories\n      searchResult = searchResult.filter((category) => category.bookmarks.length !== 0);\n\n      setBookmarkCategoriesSearchResult(searchResult);\n    }\n  }, [bookmarkCategories, bookmarkCategoriesAppliedQuery]);\n\n  const appMenu = usePopupState({\n    variant: 'popover',\n    popupId: 'appMenu',\n  });\n\n  const [infoDialogOpen, setInfoDialogOpen] = useState(false);\n\n  return (\n    <>\n      <Dialog open={infoDialogOpen} onClose={() => setInfoDialogOpen(false)}>\n        <DialogTitle>About app</DialogTitle>\n        <DialogContent>\n          <Typography color=\"textSecondary\">\n            This web app was created using React and Material-UI. It uses your browsers local\n            storage to store the bookmarks. It&apos;s also a PWA, which means you can install it\n            like a native app and use it even offline.\n            <br />\n            <br />\n            <b>GitHub:</b>\n            {' '}\n            <a href=\"https://github.com/kokolem/bookmarkmanager\">\n              https://github.com/kokolem/bookmarkmanager\n            </a>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={() => setInfoDialogOpen(false)}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <SearchDialog\n        open={searchDialogOpen}\n        onClose={() => setSearchDialogOpen(false)}\n        searchTerm={searchDialogSearchTerm}\n        onSearchTermChange={(e) => setSearchDialogSearchTerm(e.target.value)}\n        onSearch={() => {\n          setSearchDialogOpen(false);\n          setBookmarkCategoriesAppliedQuery(searchDialogSearchTerm);\n        }}\n      />\n      <BookmarkDialog\n        open={bookmarkDialogOpen}\n        creatingNew={creatingNewBookmark}\n        name={bookmarkDialogName}\n        onNameChange={(e) => setBookmarkDialogName(e.target.value)}\n        url={bookmarkDialogUrl}\n        onUrlChange={(e) => setBookmarkDialogUrl(e.target.value)}\n        category={bookmarkDialogCategory}\n        onCategoryChange={(e, value) => setBookmarkDialogCategory(value)}\n        bookmarkCategories={bookmarkCategories}\n        onClose={() => setBookmarkDialogOpen(false)}\n        onSave={() => {\n          setBookmarkDialogOpen(false);\n          handleBookmarkDialogSave();\n        }}\n      />\n      {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n      <Menu {...bindMenu(appMenu)}>\n        <MenuItem\n          onClick={() => {\n            appMenu.close();\n            setInfoDialogOpen(true);\n          }}\n        >\n          About app\n        </MenuItem>\n      </Menu>\n      {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n      <Menu {...bindMenu(bookmarkMenu)}>\n        <MenuItem\n          onClick={() => {\n            bookmarkMenu.close();\n            editBookmark(bookmarkMenuOpenOn);\n          }}\n        >\n          Edit\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            bookmarkMenu.close();\n            handleBookmarkMenuDelete();\n          }}\n        >\n          Delete\n        </MenuItem>\n        {bookmarkMenuCanBeMovedUp && (\n          <MenuItem\n            onClick={() => {\n              bookmarkMenu.close();\n              handleBookmarkMenuMoveUp(1);\n            }}\n          >\n            Move up\n          </MenuItem>\n        )}\n        {bookmarkMenuCanBeMovedDown && (\n          <MenuItem\n            onClick={() => {\n              bookmarkMenu.close();\n              handleBookmarkMenuMoveUp(-1);\n            }}\n          >\n            Move down\n          </MenuItem>\n        )}\n      </Menu>\n      <CssBaseline />\n      <Paper className={classes.paper} square={useMediaQuery(useTheme().breakpoints.down('xs'))}>\n        <Typography className={classes.text} variant=\"h5\" gutterBottom>\n          Your bookmarks\n        </Typography>\n        <List>\n          {bookmarkCategoriesSearchResult.map((category) => (\n            <React.Fragment key={`category${category.id}`}>\n              <ListSubheader className={classes.subheader}>{category.name}</ListSubheader>\n              {category.bookmarks.map((bookmark) => (\n                <React.Fragment key={`bookmark${bookmark.id}`}>\n                  <ListItem button component=\"a\" href={bookmark.url}>\n                    <ListItemAvatar>\n                      <Avatar\n                        alt=\"Bookmarked websites favicon\"\n                        src={`https://s2.googleusercontent.com/s2/favicons?domain=${bookmark.url}`}\n                      >\n                        {bookmark.name[0]}\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={bookmark.name} secondary={bookmark.url} />\n                    <ListItemSecondaryAction>\n                      <IconButton\n                        edge=\"end\"\n                        onClick={(event) => toggleBookmarkMenu(bookmark, event)}\n                      >\n                        <MoreIcon />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                </React.Fragment>\n              ))}\n            </React.Fragment>\n          ))}\n        </List>\n        {bookmarkCategoriesSearchResult.length === 0 && (\n          <>\n            {bookmarkCategoriesAppliedQuery === '' ? (\n              <Typography color=\"textSecondary\" className={classes.noBookmarksText}>\n                No bookmarks saved. Go add some!\n              </Typography>\n            ) : (\n              <Typography color=\"textSecondary\" className={classes.noBookmarksText}>\n                No bookmarks found for your query.\n              </Typography>\n            )}\n          </>\n        )}\n      </Paper>\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          <Hidden xsDown>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon />\n              </div>\n              <InputBase\n                placeholder=\"Search…\"\n                value={bookmarkCategoriesAppliedQuery}\n                onChange={(e) => setBookmarkCategoriesAppliedQuery(e.target.value)}\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n              />\n            </div>\n          </Hidden>\n          <Hidden smUp>\n            <IconButton color=\"inherit\" onClick={() => setSearchDialogOpen(true)}>\n              <SearchIcon />\n            </IconButton>\n            {bookmarkCategoriesAppliedQuery !== '' && (\n              <IconButton\n                color=\"inherit\"\n                onClick={() => {\n                  setBookmarkCategoriesAppliedQuery('');\n                  setSearchDialogSearchTerm('');\n                }}\n              >\n                <ClearIcon />\n              </IconButton>\n            )}\n          </Hidden>\n          <Fab\n            color=\"secondary\"\n            aria-label=\"add\"\n            className={classes.fabButton}\n            onClick={createNewBookmark}\n          >\n            <AddIcon />\n          </Fab>\n          <div className={classes.grow} />\n          {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n          <IconButton edge=\"end\" color=\"inherit\" {...bindToggle(appMenu)}>\n            <MoreIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}